name: Build Jailbreak Tweak (Rootless)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: checkout code
      uses: actions/checkout@v4
      
    - name: Cache Theos
      id: theos
      uses: actions/cache@v4.2.3
      env:
        cache-name: theos_cache_67db2ab
      with:
        path: theos/
        key: ${{ env.cache-name }}
        restore-keys: ${{ env.cache-name }}

    - name: setup theos
      if: steps.theos.outputs.cache-hit != 'true'
      run: |
        # install theos dependencies
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          perl \
          curl \
          wget \
          unzip \
          libplist-utils \
          libplist-dev \
          libimobiledevice-dev \
          libusbmuxd-dev \
          libssl-dev \
          libxml2-dev \
          libzip-dev \
          pkg-config \
          cmake \
          ninja-build \
          libc6-dev \
          libstdc++6 \
          zlib1g-dev
        
        # set theos environment variables
        export THEOS=$HOME/theos
        echo "THEOS=$THEOS" >> $GITHUB_ENV
        echo "export THEOS=$THEOS" >> $GITHUB_ENV
        echo "export PATH=$THEOS/bin:$PATH" >> $GITHUB_ENV
        
        # set additional theos environment variables for cross-compilation
        echo "export THEOS_PLATFORM_NAME=linux" >> $GITHUB_ENV
        echo "export THEOS_PLATFORM_SDK_ROOT=$THEOS/sdks" >> $GITHUB_ENV
        echo "export THEOS_PLATFORM_DEB_SECTION=iphoneos-arm" >> $GITHUB_ENV
        
        # clone specific theos version known to work
        git clone --recursive https://github.com/theos/theos.git $THEOS
        cd $THEOS
        git checkout 67db2ab8d950910161730de77c322658ea3e6b44
        
        # create theos configuration file
        cat > $THEOS/theos.conf << EOF
        THEOS_PLATFORM_NAME = linux
        THEOS_PLATFORM_SDK_ROOT = $THEOS/sdks
        THEOS_PLATFORM_DEB_SECTION = iphoneos-arm
        EOF
        
    - name: setup ios sdk
      if: steps.theos.outputs.cache-hit != 'true'
      run: |
        export THEOS=$HOME/theos
        
        # download ios sdk using sparse checkout from official theos sdks
        git clone --quiet -n --depth=1 --filter=tree:0 https://github.com/theos/sdks/
        cd sdks
        git sparse-checkout set --no-cone iPhoneOS14.5.sdk
        git checkout
        mv *.sdk $THEOS/sdks/
        cd ..
        rm -rf sdks
        
        # verify sdk installation
        ls -la $THEOS/sdks/
        ls -la $THEOS/sdks/iPhoneOS14.5.sdk/
        
    - name: setup toolchain
      run: |
        export THEOS=$HOME/theos
        
        # install clang and lld
        sudo apt-get install -y clang lld
        
        # download and install ldid for code signing
        # try multiple sources for ldid installation
        echo "installing ldid for code signing..."
        
        # method 1: try to install from ubuntu repositories
        sudo apt-get install -y ldid || echo "ldid not available in ubuntu repos"
        
        # method 2: try to install from procursus
        if ! command -v ldid &> /dev/null; then
          echo "trying procursus ldid..."
          curl -LO https://github.com/ProcursusTeam/ldid/releases/latest/download/ldid_linux_x86_64
          chmod +x ldid_linux_x86_64
          sudo mv ldid_linux_x86_64 /usr/local/bin/ldid
        fi
        
        # method 3: build from source if other methods fail
        if ! command -v ldid &> /dev/null; then
          echo "building ldid from source..."
          sudo apt-get install -y build-essential cmake libssl-dev
          git clone https://github.com/ProcursusTeam/ldid.git
          cd ldid
          cmake .
          make
          sudo make install
          cd ..
          rm -rf ldid
        fi
        
        # verify ldid installation
        ldid --version || echo "ldid installation failed"
        
        # setup ios cross-compilation toolchain
        echo "setting up ios cross-compilation toolchain..."
        
        # create toolchain directory structure
        mkdir -p $THEOS/toolchain/linux/iphone/bin
        
        # create symlinks to system clang for cross-compilation
        # theos expects specific toolchain paths for ios builds
        sudo ln -sf /usr/bin/clang $THEOS/toolchain/linux/iphone/bin/clang
        sudo ln -sf /usr/bin/clang++ $THEOS/toolchain/linux/iphone/bin/clang++
        sudo ln -sf /usr/bin/ld $THEOS/toolchain/linux/iphone/bin/ld
        sudo ln -sf /usr/bin/ar $THEOS/toolchain/linux/iphone/bin/ar
        sudo ln -sf /usr/bin/ranlib $THEOS/toolchain/linux/iphone/bin/ranlib
        sudo ln -sf /usr/bin/strip $THEOS/toolchain/linux/iphone/bin/strip
        
        # verify toolchain setup
        ls -la $THEOS/toolchain/linux/iphone/bin/
        
        # verify theos installation
        $THEOS/bin/nic --version || echo "theos not fully configured yet"
        
    - name: build tweak
      run: |
        # set theos environment
        export THEOS=$HOME/theos
        export PATH=$THEOS/bin:$PATH
        export THEOS_PLATFORM_NAME=linux
        export THEOS_PLATFORM_SDK_ROOT=$THEOS/sdks
        export THEOS_PLATFORM_DEB_SECTION=iphoneos-arm
        
        # build the main tool for rootless jailbreaks (dopamine, palera1n, etc.)
        cd $GITHUB_WORKSPACE
        make package THEOS_PACKAGE_SCHEME=rootless
        
        # list built artifacts
        ls -la packages/
        
    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tweak-package
        path: packages/
        retention-days: 30
        
    - name: build preferences
      run: |
        export THEOS=$HOME/theos
        export PATH=$THEOS/bin:$PATH
        export THEOS_PLATFORM_NAME=linux
        export THEOS_PLATFORM_SDK_ROOT=$THEOS/sdks
        export THEOS_PLATFORM_DEB_SECTION=iphoneos-arm
        
        cd $GITHUB_WORKSPACE/ScrubblePrefs
        make package THEOS_PACKAGE_SCHEME=rootless
        
        # list built preference bundle
        ls -la packages/
        
    - name: upload preference artifacts
      uses: actions/upload-artifact@v4
      with:
        name: preferences-package
        path: ScrubblePrefs/packages/
        retention-days: 30
