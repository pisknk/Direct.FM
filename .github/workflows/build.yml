name: Build Jailbreak Tweak (Multi-iOS Support)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - ios8_32bit
        - modern_rootless
        - modern_rootfs

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - name: "iOS 8.4.1 (32-bit) - iPhone 5"
            target: "iphone:clang:latest:8.0"
            archs: "armv7"
            scheme: "rootfs"
            suffix: "ios8-armv7"
          - name: "Modern iOS (Rootless) - arm64e"
            target: "iphone:clang:14.5:14.0"
            archs: "arm64e"
            scheme: "rootless"
            suffix: "modern-rootless-arm64e"
          - name: "Modern iOS (Rootfs) - Universal"
            target: "iphone:clang:latest:8.0"
            archs: "armv7 arm64 arm64e"
            scheme: "rootfs"
            suffix: "universal-rootfs"
    
    name: ${{ matrix.name }}
    
    steps:
    - name: checkout code
      uses: actions/checkout@v4
      
    - name: setup theos
      run: |
        # install theos dependencies using brew
        brew install make ldid
        
        # set PATH to use brew's GNU make
        echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH
        
        # set theos environment variables
        export THEOS=$HOME/theos
        echo "THEOS=$THEOS" >> $GITHUB_ENV
        echo "export PATH=$THEOS/bin:$PATH" >> $GITHUB_ENV
        
        # clone theos
        git clone --recursive https://github.com/theos/theos.git $THEOS
        
        # create theos configuration file
        mkdir -p $THEOS
        cat > $THEOS/theos.conf << EOF
        THEOS_PLATFORM_SDK_ROOT = $THEOS/sdks
        EOF
        
        # setup frameworks directory
        mkdir -p $THEOS/lib
        
    - name: setup ios sdk
      run: |
        export THEOS=$HOME/theos
        
        # download ios 14.5 sdk (works for all targets including ios 8 with proper targeting)
        echo "downloading ios 14.5 sdk..."
        git clone --quiet -n --depth=1 --filter=tree:0 https://github.com/theos/sdks/
        cd sdks
        
        # list available sdks first for debugging
        echo "checking available sdks in repository..."
        git ls-tree -r --name-only HEAD | grep "\.sdk" | head -10
        
        # download ios 14.5 sdk
        git sparse-checkout set --no-cone iPhoneOS14.5.sdk
        git checkout
        
        # create sdks directory and move sdk
        mkdir -p $THEOS/sdks
        
        # check if sdk was downloaded and move it
        if [[ -d "iPhoneOS14.5.sdk" ]]; then
          mv iPhoneOS14.5.sdk $THEOS/sdks/
          echo "ios 14.5 sdk installed successfully"
        else
          echo "error: iPhoneOS14.5.sdk not found after checkout"
          echo "contents of current directory:"
          ls -la
          exit 1
        fi
        
        cd ..
        rm -rf sdks
        
        # verify sdk installation
        echo "installed sdks:"
        ls -la $THEOS/sdks/
        
        if [[ -d "$THEOS/sdks/iPhoneOS14.5.sdk" ]]; then
          echo "sdk verification successful"
          ls -la $THEOS/sdks/iPhoneOS14.5.sdk/ | head -5
        else
          echo "error: sdk verification failed"
          exit 1
        fi
        
    # Setup MediaRemote framework headers for iOS 8.4.1
    - name: setup mediaremote headers
      run: |
        export THEOS=$HOME/theos
        
        # create headers directory
        mkdir -p $THEOS/include/MediaRemote
        
        # create MediaRemote.h with necessary declarations
        cat > $THEOS/include/MediaRemote/MediaRemote.h << 'EOF'
        #ifndef MEDIAREMOTE_H_
        #define MEDIAREMOTE_H_
        
        #import <Foundation/Foundation.h>
        
        // handle ios version differences
        #if __arm__
            // ios 8.4.1 (32-bit) - no NSNotificationName
            #define MR_NOTIFICATION NSString *
        #else
            // modern ios - use NSNotificationName
            #define MR_NOTIFICATION NSNotificationName
        #endif
        
        #if __cplusplus
        extern "C" {
        #endif
        
        typedef void (^MRMediaRemoteGetNowPlayingInfoCompletion)(CFDictionaryRef information);
        typedef void (^MRMediaRemoteGetNowPlayingApplicationIsPlayingCompletion)(Boolean isPlaying);
        
        void MRMediaRemoteGetNowPlayingInfo(dispatch_queue_t queue, MRMediaRemoteGetNowPlayingInfoCompletion completion);
        void MRMediaRemoteGetNowPlayingApplicationIsPlaying(dispatch_queue_t queue, MRMediaRemoteGetNowPlayingApplicationIsPlayingCompletion completion);
        void MRMediaRemoteRegisterForNowPlayingNotifications(dispatch_queue_t queue);
        void MRMediaRemoteUnregisterForNowPlayingNotifications();
        
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingInfoDidChangeNotification;
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingPlaybackQueueDidChangeNotification;
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingApplicationDidChangeNotification;
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification;
        
        extern NSString * const kMRMediaRemoteNowPlayingInfoTitle;
        extern NSString * const kMRMediaRemoteNowPlayingInfoArtist;
        extern NSString * const kMRMediaRemoteNowPlayingInfoAlbum;
        extern NSString * const kMRMediaRemoteNowPlayingInfoDuration;
        extern NSString * const kMRMediaRemoteNowPlayingInfoTimestamp;
        extern NSString * const kMRMediaRemoteNowPlayingInfoArtworkData;
        extern NSString * const kMRMediaRemoteNowPlayingInfoElapsedTime;
        extern NSString * const kMRMediaRemoteNowPlayingInfoPlaybackRate;
        extern NSString * const kMRMediaRemoteNowPlayingInfoRepeatMode;
        extern NSString * const kMRMediaRemoteNowPlayingInfoShuffleMode;
        
        #if __cplusplus
        }
        #endif
        
        #endif /* MEDIAREMOTE_H_ */
        EOF
        
        echo "MediaRemote headers created at $THEOS/include/MediaRemote/MediaRemote.h"
        ls -la $THEOS/include/MediaRemote/
        
    - name: build tweak
      run: |
        export THEOS=$HOME/theos
        export PATH=$THEOS/bin:$PATH
        
        echo "building scrubble for ${{ matrix.name }}"
        echo "target: ${{ matrix.target }}"
        echo "architectures: ${{ matrix.archs }}"
        echo "scheme: ${{ matrix.scheme }}"
        
        cd $GITHUB_WORKSPACE
        
        # build command based on scheme
        if [[ "${{ matrix.scheme }}" == "rootless" ]]; then
          echo "building for rootless jailbreak..."
          make package THEOS_PACKAGE_SCHEME=rootless DEBUG=0 FINALPACKAGE=1 ARCHS="${{ matrix.archs }}" TARGET="${{ matrix.target }}"
        else
          echo "building for traditional rootfs jailbreak..."
          make package DEBUG=0 FINALPACKAGE=1 ARCHS="${{ matrix.archs }}" TARGET="${{ matrix.target }}"
        fi
        
        # rename package with suffix for identification
        if [[ -d "packages" ]]; then
          echo "build successful! packages created:"
          ls -la packages/
          
          # rename .deb files to include suffix
          for deb in packages/*.deb; do
            if [[ -f "$deb" ]]; then
              basename=$(basename "$deb" .deb)
              dirname=$(dirname "$deb")
              mv "$deb" "$dirname/${basename}-${{ matrix.suffix }}.deb"
            fi
          done
          
          echo "renamed packages:"
          ls -la packages/
        else
          echo "build failed - no packages directory created"
          exit 1
        fi
        
    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scrubble-${{ matrix.suffix }}
        path: packages/
        retention-days: 30
        
    - name: build summary
      run: |
        echo "## Build Summary for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target:** ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architectures:** ${{ matrix.archs }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scheme:** ${{ matrix.scheme }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SDK:** iPhoneOS14.5.sdk (compatible with iOS 8+)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Packages Created:" >> $GITHUB_STEP_SUMMARY
        for deb in packages/*.deb; do
          if [[ -f "$deb" ]]; then
            size=$(ls -lh "$deb" | awk '{print $5}')
            name=$(basename "$deb")
            echo "- \`$name\` ($size)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
