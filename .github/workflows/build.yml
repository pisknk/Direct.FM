name: Build Jailbreak Tweak (iOS 8.4.1)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    name: Build for iOS 8.4.1
    
    steps:
    - name: checkout code
      uses: actions/checkout@v4
      
    - name: setup theos
      run: |
        # install theos dependencies using brew
        brew install make ldid
        
        # set PATH to use brew's GNU make
        echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH
        
        # set theos environment variables
        export THEOS=$HOME/theos
        echo "THEOS=$THEOS" >> $GITHUB_ENV
        echo "export PATH=$THEOS/bin:$PATH" >> $GITHUB_ENV
        
        # clone theos
        git clone --recursive https://github.com/theos/theos.git $THEOS
        
        # create theos configuration file
        mkdir -p $THEOS
        cat > $THEOS/theos.conf << EOF
        THEOS_PLATFORM_SDK_ROOT = $THEOS/sdks
        EOF
        
        # setup frameworks directory
        mkdir -p $THEOS/lib
        
    - name: setup ios 8.4 sdk
      run: |
        export THEOS=$HOME/theos
        
        # download ios 8.4 sdk
        echo "downloading ios 8.4 sdk..."
        mkdir -p $THEOS/sdks
        cd $THEOS/sdks
        
        # download ios 8.4 sdk from a reliable source
        curl -L https://github.com/theos/sdks/archive/refs/heads/master.zip -o sdks.zip
        unzip sdks.zip
        mv sdks-master/iPhoneOS8.4.sdk .
        rm -rf sdks.zip sdks-master
        
        # verify sdk installation
        if [[ -d "iPhoneOS8.4.sdk" ]]; then
          echo "ios 8.4 sdk installed successfully"
          ls -la iPhoneOS8.4.sdk/System/Library/PrivateFrameworks/
        else
          echo "error: ios 8.4 sdk installation failed"
          exit 1
        fi
        
    # Setup MediaRemote framework headers for iOS 8.4.1
    - name: setup mediaremote headers
      run: |
        export THEOS=$HOME/theos
        
        # create headers directory
        mkdir -p $THEOS/include/MediaRemote
        
        # create MediaRemote.h with necessary declarations
        cat > $THEOS/include/MediaRemote/MediaRemote.h << 'EOF'
        #ifndef MEDIAREMOTE_H_
        #define MEDIAREMOTE_H_
        
        #import <Foundation/Foundation.h>
        
        // handle ios version differences
        #if __arm__
            // ios 8.4.1 (32-bit) - no NSNotificationName
            #define MR_NOTIFICATION NSString *
        #else
            // modern ios - use NSNotificationName
            #define MR_NOTIFICATION NSNotificationName
        #endif
        
        #if __cplusplus
        extern "C" {
        #endif
        
        typedef void (^MRMediaRemoteGetNowPlayingInfoCompletion)(CFDictionaryRef information);
        typedef void (^MRMediaRemoteGetNowPlayingApplicationIsPlayingCompletion)(Boolean isPlaying);
        
        void MRMediaRemoteGetNowPlayingInfo(dispatch_queue_t queue, MRMediaRemoteGetNowPlayingInfoCompletion completion);
        void MRMediaRemoteGetNowPlayingApplicationIsPlaying(dispatch_queue_t queue, MRMediaRemoteGetNowPlayingApplicationIsPlayingCompletion completion);
        void MRMediaRemoteRegisterForNowPlayingNotifications(dispatch_queue_t queue);
        void MRMediaRemoteUnregisterForNowPlayingNotifications();
        
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingInfoDidChangeNotification;
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingPlaybackQueueDidChangeNotification;
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingApplicationDidChangeNotification;
        extern MR_NOTIFICATION const kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification;
        
        extern NSString * const kMRMediaRemoteNowPlayingInfoTitle;
        extern NSString * const kMRMediaRemoteNowPlayingInfoArtist;
        extern NSString * const kMRMediaRemoteNowPlayingInfoAlbum;
        extern NSString * const kMRMediaRemoteNowPlayingInfoDuration;
        extern NSString * const kMRMediaRemoteNowPlayingInfoTimestamp;
        extern NSString * const kMRMediaRemoteNowPlayingInfoArtworkData;
        extern NSString * const kMRMediaRemoteNowPlayingInfoElapsedTime;
        extern NSString * const kMRMediaRemoteNowPlayingInfoPlaybackRate;
        extern NSString * const kMRMediaRemoteNowPlayingInfoRepeatMode;
        extern NSString * const kMRMediaRemoteNowPlayingInfoShuffleMode;
        
        #if __cplusplus
        }
        #endif
        
        #endif /* MEDIAREMOTE_H_ */
        EOF
        
        echo "MediaRemote headers created at $THEOS/include/MediaRemote/MediaRemote.h"
        ls -la $THEOS/include/MediaRemote/
        
    - name: build tweak
      run: |
        export THEOS=$HOME/theos
        export PATH=$THEOS/bin:$PATH
        
        echo "building scrubble for iOS 8.4.1"
        cd $GITHUB_WORKSPACE
        
        # build for ios 8.4.1
        make package DEBUG=0 FINALPACKAGE=1
        
        # verify build
        if [[ -d "packages" ]]; then
          echo "build successful! packages created:"
          ls -la packages/
          
          # rename package to indicate ios 8.4.1 build
          for deb in packages/*.deb; do
            if [[ -f "$deb" ]]; then
              basename=$(basename "$deb" .deb)
              dirname=$(dirname "$deb")
              mv "$deb" "$dirname/${basename}-ios8.4.1.deb"
            fi
          done
          
          echo "renamed packages:"
          ls -la packages/
        else
          echo "build failed - no packages directory created"
          exit 1
        fi
        
    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scrubble-ios8.4.1
        path: packages/
        retention-days: 30
        
    - name: build summary
      run: |
        echo "## Build Summary for iOS 8.4.1" >> $GITHUB_STEP_SUMMARY
        echo "- **Target:** iphone:clang:8.4:8.0" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** armv7" >> $GITHUB_STEP_SUMMARY
        echo "- **SDK:** iPhoneOS8.4.sdk" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Packages Created:" >> $GITHUB_STEP_SUMMARY
        for deb in packages/*.deb; do
          if [[ -f "$deb" ]]; then
            size=$(ls -lh "$deb" | awk '{print $5}')
            name=$(basename "$deb")
            echo "- \`$name\` ($size)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
